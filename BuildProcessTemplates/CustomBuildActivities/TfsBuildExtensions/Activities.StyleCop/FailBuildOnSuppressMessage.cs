//-----------------------------------------------------------------------
// <copyright file="StyleCop.cs">(c) 3MHIS FailBuildOnSuppressMessage</copyright>
//-----------------------------------------------------------------------
// TODO: figure out why comilation breaks if we move StyleCop declaration into the namespace
// <autogenerated/>
using StyleCop;

namespace TfsBuildExtensions.Activities.StyleCop
{
    using System;
    using System.Activities;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Globalization;
    using System.IO;
    using System.Text;
    using Microsoft.TeamFoundation.Build.Client;
    using Microsoft.TeamFoundation.VersionControl.Client;

    /// <summary>
    /// Wraps the StyleCopConsole class to provide a mechanism for scanning files for StyleCop compliance.
    /// </summary>
    /// <example>
    /// <code lang="xml"><![CDATA[
    /// <Sequence DisplayName="TFSBuildExtensions StyleCop Sequence" sap:VirtualizedContainerService.HintSize="818,146">
    /// <Sequence.Variables>
    /// <Variable x:TypeArguments="x:Int32" Name="StyleCopViolationCount" />
    /// </Sequence.Variables>
    /// <tac1:StyleCop AdditionalAddInPaths="{x:Null}" CacheResults="{x:Null}" FailBuildOnError="{x:Null}" MaximumViolationCount="{x:Null}" Succeeded="{x:Null}" TreatViolationsErrorsAsWarnings="{x:Null}" TreatWarningsAsErrors="{x:Null}" ForceFullAnalysis="True" sap:VirtualizedContainerService.HintSize="200,22" LogExceptionStack="True" LogFile="[SourcesDirectory + &quot;\StyleCopLog.txt&quot;]" SettingsFile="[SourcesDirectory + &quot;\Settings.StyleCop&quot;]" ShowOutput="True" SourceFiles="[New String() {SourcesDirectory}]" ViolationCount="[StyleCopViolationCount]" XmlOutputFile="[SourcesDirectory + &quot;\StyleCopviolations.xml&quot;]" />
    /// </Sequence>
    /// ]]></code>    
    /// </example>
    [BuildActivity(HostEnvironmentOption.Agent)]
    public sealed class FailBuildOnSuppressMessage : BaseCodeActivity
    {
        /// <summary>
        /// The status of the analysis
        /// </summary>
        private bool exitCode = true;

        /// <summary>
        /// The files that vioaltions encountered
        /// </summary>
        private List<string> violations = new List<string>();

        /// <summary>
        /// Sets the source files path or list of specific files
        /// </summary>
        [RequiredArgument]
        [Description("Sets the source files path or list of specific files. OBSOLETE.")]
        public InArgument<string[]> SourceFiles { get; set; }

        /// <summary>
        /// Gets the number of violations found.
        /// </summary>
        [Description("Gets the number of violations found.")]
        public OutArgument<int> ViolationCount { get; set; }

        /// <summary>
        /// Sets a value indicating whether to show names of files scanned to the build log
        /// </summary>
        [Description("Sets a value indicating whether to show names of files scanned to the build log")]
        public InArgument<bool> ShowOutput { get; set; }

        /// <summary>
        /// Gets whether the scan succeeded.
        /// </summary>
        [Description("Gets whether the scan succeeded.")]
        public OutArgument<bool> Succeeded { get; set; }
        
        /// <summary>
        /// Executes the logic for this workflow activity
        /// </summary>
        protected override void InternalExecute()
        {
            this.Scan();
        }

        private void Scan()
        {

            int violationCount = 0;

            // Add each source file to this project.
            if (this.SourceFiles.Get(this.ActivityContext) != null)
            {
                foreach (var inputSourceLocation in this.SourceFiles.Get(this.ActivityContext))
                {
                    // could be a path or a file
                    if (System.IO.File.Exists(inputSourceLocation))
                    {
                        if (this.ShowOutput.Get(this.ActivityContext))
                        {
                            LogBuildMessage(string.Format(CultureInfo.CurrentCulture, "Adding file to check [{0}", inputSourceLocation) + "]", BuildMessageImportance.Low);
                        }

                        // check if SuppressMessage found
                        violationCount += this.CheckForSuppressMessageViolation(inputSourceLocation); 
                    }
                    else if (System.IO.Directory.Exists(inputSourceLocation))
                    {
                        foreach (var fileInDirectory in System.IO.Directory.GetFiles(inputSourceLocation, "*.cs*", SearchOption.AllDirectories))
                        {
                            if (this.ShowOutput.Get(this.ActivityContext))
                            {
                                LogBuildMessage(string.Format(CultureInfo.CurrentCulture, "Adding file to check [{0}", fileInDirectory) + "]", BuildMessageImportance.Low);
                            }

                            // check if SuppressMessage found
                            violationCount += this.CheckForSuppressMessageViolation(fileInDirectory);                                                                                   
                        }
                    }
                    else
                    {
                        LogBuildMessage(string.Format(CultureInfo.CurrentCulture, "Cannot add file to check [{0}", inputSourceLocation) + "]", BuildMessageImportance.Low);
                    }
                }
            }
            if(violationCount > 0)
                this.exitCode = false;            

            this.Succeeded.Set(this.ActivityContext, this.exitCode);
            this.ViolationCount.Set(this.ActivityContext, violationCount);
        }

        private int CheckForSuppressMessageViolation(string fileToScan)
        {
            int violationsFound = 0;

            foreach(string line in File.ReadAllLines(fileToScan))
            {
                if(line.Contains("[SuppressMessage"))
                {
                    LogBuildError(string.Format(CultureInfo.CurrentCulture, "{0} [{1}]", "SuppressMessage Found", fileToScan));
                    violationsFound++;
                }

                if (line.Contains("<ExcludeFromStyleCop>"))
                {
                    LogBuildError(string.Format(CultureInfo.CurrentCulture, "{0} [{1}]", "<ExcludeFromStyleCop> Found", fileToScan));
                    violationsFound++;
                }
                
            }

            return violationsFound;
        }
    }
}
